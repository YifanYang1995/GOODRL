import argparse

parser = argparse.ArgumentParser(description='Arguments for ppo_dws')
# args for device
parser.add_argument('--device', type=str, default="cpu", help='Processor type')

# args for Env
parser.add_argument('--env_seed', type=int, default=0, help='Seed of the environment')
parser.add_argument('--wf_num', type=int, default=30, help='Number of workflows within a problem instance')
parser.add_argument('--wf_size', type=str, default='S', help='Workflow patterns within a problem instance, i.e., S, M, L, XL')
parser.add_argument('--valid_num', type=int, default=30, help='Number of problem instances used to validate the performance of a policy')
parser.add_argument('--generateWay', type=str, default='rotation', help='The way the dataset was generated')
parser.add_argument('--env_name', type=str, default='WorkflowScheduling-v3', help='Name of environment')
parser.add_argument('--traf_type', type=str, default='CONSTANT', help='Whether the Arrival rate changes')
parser.add_argument('--arr_rate', type=lambda x: float(x) / 3600, default=5.4/3600, help='Arrival rate of workflows (per second); The smaller the interval, the larger the interval')
parser.add_argument('--each_vm_type_num', type=int, default=6, help='Number of instances for each VM type')
parser.add_argument('--vm_types', type=int, default=4, help='Number of VM types')

# args for GP
parser.add_argument('--eval_num', type=int, default=3, help='Number of problem instances used to collect experiences') 
parser.add_argument('--pop_size', type=int, default=1024, help='Population size') 
parser.add_argument('--gen_num', type=int, default=100, help='Iteration times of GP')
parser.add_argument('--elite_num', type=int, default=10, help='Number of elites')  
parser.add_argument('--cross_rate', type=float, default=0.8, help='Crossover rate')  
parser.add_argument('--mutate_rate', type=float, default=0.15, help='Mutation rate')  

# args for ES-RL
parser.add_argument('--sigma_init', type=float, default=0.05, help='Sigma init: noise standard deviation')
parser.add_argument('--sigma_decay', type=float, default=1, help='decay ratio of Sigma init')
parser.add_argument('--es_pop_size', type=int, default=4, help='Population size') 
parser.add_argument('--es_gen_num', type=int, default=3, help='Iteration times of GP')
parser.add_argument('--policy_name', type=str, default='WFPolicy', help='policy class name')

# args for online-PPO
parser.add_argument('--online_start_ac', type=str, default='5_5_5.4', help='starting actor and critic parameters') 
parser.add_argument('--slip_return', type=int, default=1, help='0 not use, 1 use new trick')
parser.add_argument('--separate_update', type=int, default=1, help='0 not use, 1 use new trick')
parser.add_argument('--grad_control', type=int, default=1, help='0 not use, 1 use new trick')
parser.add_argument('--entropy_control', type=int, default=1, help='0 not use, 1 use new trick')
parser.add_argument('--entropy_min', type=float, default=0.6, help='If the value is lower than 0.6, entropy needs to be added')
parser.add_argument('--entropy_max', type=float, default=1.2, help='If the value is larger than 1.2, entropy needs to be reduced')

# args for PPO
parser.add_argument('--algo_seed', type=int, default=4, help='Seed of the algorithm')
parser.add_argument('--warmup_critic', type=int, default=50, help='Warm up steps to train critic only')
parser.add_argument('--warmup_steps', type=int, default=3000, help='Warm up steps in data')
parser.add_argument('--window_steps', type=int, default=256, help='Update window steps in online learning')
parser.add_argument('--lr_a', type=float, default=1e-3, help='lr of actor')
parser.add_argument('--lr_c', type=float, default=1e-3, help='lr of critic')
parser.add_argument('--n_epochs', type=int, default=1, help='update policy for n epochs in offline PPO')
parser.add_argument('--epochs_a', type=int, default=1, help='update actor for n epochs')
parser.add_argument('--epochs_c', type=int, default=4, help='update critic for n epochs')
parser.add_argument('--num_envs', type=int, default=4, help='No. of parallel envs for learning')
parser.add_argument('--max_updates', type=int, default=1000, help='Number of episodes for training the neural network')
parser.add_argument('--lr', type=float, default=1e-3, help='lr')
parser.add_argument('--decayflag', type=bool, default=False, help='lr decayflag')
parser.add_argument('--decay_step_size', type=int, default=400, help='decay_step_size')   
parser.add_argument('--decay_ratio', type=float, default=0.9, help='decay_ratio, e.g. 0.9, 0.95')  
parser.add_argument('--gamma', type=float, default=0.99, help='discount factor')
parser.add_argument('--gae_lambda', type=float, default=1, help='gea lamda factor')
parser.add_argument('--batch_num', type=int, default=2, help='How many mini-batches are used for updating; =1 means that the entire episode information is used')
parser.add_argument('--batch_size', type=int, default=64, help='')
parser.add_argument('--eps_clip', type=float, default=0.2, help='clip parameter for PPO')
parser.add_argument('--vloss_coef', type=float, default=0.5, help='critic loss coefficient')
parser.add_argument('--ploss_coef', type=float, default=1, help='policy loss coefficient')
parser.add_argument('--entloss_coef', type=float, default=0, help='entropy loss coefficient')
parser.add_argument('--log_interval', type=int, default=20, help='Record information at each log_interval steps')
parser.add_argument('--require_estimated_features', type=int, default=1, help='Whether to estimate the value of unassigned tasks')
parser.add_argument('--require_mean', type=int, default=0, help='Is mean information required in input')
parser.add_argument('--require_undirected', type=int, default=1, help='Requires an undirected graph')
parser.add_argument('--remove_completed', type=int, default=0, help='')
parser.add_argument('--require_clip_value', type=float, default=4)

# args for Network
parser.add_argument('--c_gnn_layers', type=int, default=2, help='No. of layers GNN including input layer')
parser.add_argument('--c_layers', type=int, default=4, help='No. of layers in actor and critic')
parser.add_argument('--c_hidden_dim', type=int, default=128, help='hidden dim in all network layer')
parser.add_argument('--atten_layers', type=int, default=1, help='No. of layers required for self-attention')
parser.add_argument('--gnn_layers', type=int, default=2, help='No. of layers GNN including input layer')
parser.add_argument('--mlp_layers', type=int, default=4, help='No. of layers in actor and critic')
parser.add_argument('--input_dim_wf', type=int, default=3, help='number of dimension of raw workflow-task features')
parser.add_argument('--input_dim_vm', type=int, default=4, help='number of dimension of raw vm-task features')
parser.add_argument('--hidden_dim', type=int, default=128, help='hidden dim in all network layer')
parser.add_argument('--embedding_type', type=str, default='gat', help='network type of GNN: gin or gat')
parser.add_argument('--activate_fn', type=str, default='relu', help='activate function of actor network')
parser.add_argument('--heads', type=int, default=1)  # gat parameters
parser.add_argument('--dropout', type=float, default=0.)  # gat parameters
parser.add_argument('--neighbor_pooling_type', type=str, default='sum', help='neighbour pooling type')
parser.add_argument('--graph_pooling_type', type=str, default='average', help='graph pooling type')
parser.add_argument('--normalize', type=bool, default=True) 
parser.add_argument('--normalize_features', type=tuple, default=(3, 39186, 105873, 19593, 50000, 48, 1)) 
parser.add_argument('--normalize_wf', type=tuple, default=(3, 39186, 105873)) 
parser.add_argument('--normalize_vm', type=tuple, default=(19593, 50000, 48, 1)) 
parser.add_argument('--normalize_advantage', type=bool, default=False) 
parser.add_argument('--initial_num', type=int, default=2) 
parser.add_argument('--grad_max', type=float, default=2) 
parser.add_argument('--normalize_rewards', type=int, default=1000) 

configs = parser.parse_args() 
